#!/usr/bin/env python3

# To use this credentials helper, specify it either in the default credential
# section, or in the credential section for a specific URL:
#
#  git config --global credential.helper bitwarden
#  git config --global credential.https://github.com.helper bitwarden
#
# I recommend disabling the credential cache when using Bitwarden, to guarantee
# that locking Bitwarden immediately prevents further access to the account.
#
#  git config --global --replace-all credential.https://github.com.helper ''
#  git config --global --add credential.https://github.com.helper bitwarden
#
# If the helper fails to identify the correct vault item, either fix your vault
# item (typical errors include having no URI matcher configured or using http://
# instead of https://) or specify the item id through the `--item-id` option:
#
#  git config --global credential.https://github.com.helper "bitwarden --item-id '<item-id-here>'"
#
# By default the helper uses the password field of the vault item. If you want
# to use a custom field (e.g. because you are using GitHub 2FA), use the option
# `--custom-field`:
#
#  git config --global credential.https://github.com.helper "bitwarden --custom-field '<custom-field-name-here>'"
#
# Most of the time it's actually easier to edit the config manually. Example: To
# use credential cache by default, but disable cache and instead use Bitwarden
# for GitHub with 2FA only:
#
# [credential]
#   helper = cache
#
# [credential "https://github.com"]
#   helper =
#   helper = "bitwarden --custom-field 'Personal Access Token'"

import argparse
import json
import subprocess
import sys

RED = '\033[31m'
GREEN = '\033[32m'
YELLOW = '\033[33m'
BLUE = '\033[34m'
RESET = '\033[m'

class Logger:
    def __init__(self, enable_colors=True):
        self.enable_colors = enable_colors

    def write(self, color, msg):
        reset = RESET
        if not self.enable_colors:
            color = ''
            reset = ''
        # Always log to stderr to prevent writing to stdout by accident while
        # it's captured by `git credential`.
        print(f'{color}[bitwarden] {msg}{reset}', file=sys.stderr)

    def error(self, msg):
        self.write(RED, msg)

    def success(self, msg):
        self.write(GREEN, msg)

    def warn(self, msg):
        self.write(YELLOW, msg)

    def info(self, msg):
        self.write(BLUE, msg)

class BitwardenCliNotFound(Exception):
    pass

class Bitwarden:
    def __init__(self, cli=None):
        self.cli = cli or 'bw'

    def _run(self, args):
        args = [self.cli] + args
        try:
            result = subprocess.run(args, capture_output=True, encoding='utf-8')
        except FileNotFoundError as e:
            raise BitwardenCliNotFound('Bitwarden CLI was not found.') from e
        # Bitwarden CLI outputs JSON.
        try:
            blob = json.loads(result.stdout)
        except json.JSONDecodeError:
            blob = None
        return result.returncode, blob

    def status(self):
        return self._run(['status'])

    def get_item(self, pattern_or_id):
        return self._run(['get', 'item', pattern_or_id])

class CredentialHelperFailed(Exception):
    pass

class UnsupportedCommand(CredentialHelperFailed):
    pass

class BitwardenCredentialHelper:
    def __init__(self, *, logger=None, cli=None, force=False, item_id=None, custom_field=None):
        self.log = logger or Logger()
        self.bitwarden = Bitwarden(cli)
        self.force = force
        self.item_id = item_id
        self.custom_field = custom_field

    def handle(self, command):
        if command != 'get':
            # Ignore "store" or "erase" requests.
            raise UnsupportedCommand(f'Command {command} is not supported')
        self.get()

    def get(self):
        try:
            self.check_vault_status()
            attributes = self.parse_attributes_from_stdin()
            item = self.retrieve_vault_item(attributes)
            if item is None:
                return

            item_name = item.get('name')
            self.log.success(f'Selected vault item "{item_name}".')

            self.validate_or_set_username(item, attributes)
            self.set_password(item)
        except:
            if self.force:
                print('quit=true')
            raise

    def check_vault_status(self):
        # Abort if vault is not unlocked.
        code, status = self.bitwarden.status()
        if code != 0:
            raise CredentialHelperFailed(f'"bw status" returned {code}.')
        if status['status'] != 'unlocked':
            raise CredentialHelperFailed('Your vault is locked.')

    def parse_attributes_from_stdin(self):
        # Parse provided attributes (protocol, host, etc.) from stdin.
        # See https://git-scm.com/docs/git-credential#IOFMT
        attributes = {}
        for line in sys.stdin:
            parts = line.strip().split('=', 1)
            if parts[0] == '':
                break
            key, value = parts
            attributes[key] = value

        # The attributes protocol, host and path should always be present.
        assert 'protocol' in attributes, 'Provided attributes are missing "protocol" value'
        assert 'host' in attributes, 'Provided attributes are missing "host" value'
        return attributes

    def retrieve_vault_item(self, attributes):
        if self.item_id is None:
            # No item id provided. Search for the URL.
            baseurl = f'{attributes["protocol"]}://{attributes["host"]}'
            code, item = self.bitwarden.get_item(baseurl)
            if code != 0 or item is None:
                if self.force:
                    raise CredentialHelperFailed(f'No item found in vault for URL "{baseurl}".')
                self.log.warn(f'No item found in vault for URL "{baseurl}".')
                return None
            return item

        # Retrieve the specified item.
        code, item = self.bitwarden.get_item(self.item_id)
        if code != 0 or item is None:
            raise CredentialHelperFailed(f'Unable to retrieve item "{self.item_id}" from vault.')
        return item

    def validate_or_set_username(self, item, attributes):
        login = item.get('login')
        if login is None:
            raise CredentialHelperFailed('Vault item has invalid structure.')

        selected_username = login.get('username')
        if selected_username is None:
            raise CredentialHelperFailed('Vault item does not have a username set.')

        attr_username = attributes.get('username')
        if attr_username is None:
            print(f'username={selected_username}')
        elif selected_username != attr_username:
            # Overriding a pre-defined piece of a credential is bad practice.
            raise CredentialHelperFailed(f'Pre-defined username "{attr_username}" differs from credential username "{selected_username}".')

    def set_password(self, item):
        login = item.get('login')
        if login is None:
            raise CredentialHelperFailed('Vault item has invalid structure.')

        if self.custom_field is None:
            selected_password = login.get('password')
            if selected_password is None:
                raise CredentialHelperFailed('Vault item does not have a password set.')
        else:
            matching_fields = [f for f in item['fields'] if f['name'] == self.custom_field]
            if len(matching_fields) == 0:
                raise CredentialHelperFailed(f'Custom field "{self.custom_field}" does not exist.')
            selected_password = matching_fields[0]['value']
        print(f'password={selected_password}')

def parse_arguments(argv):
    argparser = argparse.ArgumentParser()
    argparser.add_argument(
        '--cli',
        default='bw',
        help='Path to Bitwarden CLI. (default "bw")'
    )
    argparser.add_argument(
        '--force',
        action='store_true',
        help='Fail if no matching item was found in the vault. By default Git queries the user interactively if no helper returns usable data.'
    )
    argparser.add_argument(
        '--item-id',
        help='Use this exact vault item instead of searching for a match.'
    )
    argparser.add_argument(
        '--custom-field',
        help='Instead of the item\'s password, use the value from the given custom field.'
    )
    argparser.add_argument(
        'command',
        choices=['get', 'store', 'erase'],
        help='The Git credential command to handle.'
    )
    return argparser.parse_args(argv)

def main(argv):
    args = parse_arguments(argv)

    log = Logger()

    kwargs = dict(vars(args))
    del kwargs['command']
    kwargs['logger'] = log

    try:
        credential_helper = BitwardenCredentialHelper(**kwargs)
        credential_helper.handle(args.command)
    except UnsupportedCommand:
        # Don't output anything.
        raise
    except Exception as e:
        log.error(e)
        raise

if __name__ == '__main__':
    try:
        main(sys.argv[1:])
    except Exception as e:
        sys.exit(1)
