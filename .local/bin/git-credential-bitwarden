#!/usr/bin/env zsh

# To use this credentials helper, specify it either in the default credential
# section, or in the credential section for a specific URL:
#
#  git config --global credential.helper bitwarden
#  git config --global credential.https://github.com.helper bitwarden
#
# I recommend disabling the credential cache when using Bitwarden, to guarantee
# that locking Bitwarden immediately prevents further access to the account.
#
#  git config --global --replace-all credential.https://github.com.helper ''
#  git config --global --add credential.https://github.com.helper bitwarden
#
# If the helper fails to identify the correct vault item, either fix your vault
# item (typical errors include having no URI matcher configured or using http://
# instead of https://) or specify the item id through the `--item-id` option:
#
#  git config --global credential.https://github.com.helper "bitwarden --item-id '<item-id-here>'"
#
# By default the helper uses the password field of the vault item. If you want
# to use a custom field (e.g. because you are using GitHub 2FA), use the option
# `--custom-field`:
#
#  git config --global credential.https://github.com.helper "bitwarden --custom-field '<custom-field-name-here>'"
#
# Most of the time it's actually easier to edit the config manually. Example: To
# use credential cache by default, but disable cache and instead use Bitwarden
# for GitHub with 2FA only:
#
# [credential]
#   helper = cache
#
# [credential "https://github.com"]
#   helper =
#   helper = "bitwarden --custom-field 'Personal Access Token'"

credential_get() {
  if ! (( $+commands[bw] )); then
    >&2 echo '\e[31mbw is not installed or not in your $PATH.\e[m'
    return 1
  fi

  local protocol
  local host
  local gpath
  local username
  while IFS='=' read -r key value; do
    if [ -z "$key" ]; then
      break
    fi
    #>&2 echo "read: key=$key value=$value"
    case "$key" in
      protocol)
        protocol="$value"
        ;;
      host)
        host="$value"
        ;;
      gpath)
        gpath="$value"
        ;;
      username)
        username="$value"
        ;;
    esac
  done

  # Abort if Bitwarden vault is not unlocked.
  local bw_status="$(bw status 2>/dev/null | jq -r '.status')"
  if [ "$bw_status" != 'unlocked' ]; then
    >&2 echo '\e[31mYour vault is locked.\e[m'
    echo 'quit=true'
    return 1
  fi

  # Get configuration overrides.
  local baseurl="$protocol://$host"

  # Retrieve the item.
  local bw_item
  if [ -z "${args[item-id]}" ]; then
    # No item id provided. Search for the URL.
    bw_item="$(bw get item "$baseurl" 2>/dev/null)"
    local err=$?
    if [ $err -ne 0 ] || [ -z "$bw_item" ]; then
      if [ "${args[force]}" = true ]; then
        >&2 echo "\e[31mNo item found in Bitwarden vault for URL '$baseurl'.\e[m"
        >&2 echo 'Either add an URI matcher to the item or configure the item id to use:'
        >&2 echo "  git config --global 'credential.$baseurl.bw-item-id' '<item-id>'"
        echo 'quit=true'
        return 1
      else
        >&2 echo "\e[33mNo item found in Bitwarden vault for URL '$baseurl'.\e[m"
        return
      fi
    fi
  else
    # Retrieve the specified item.
    bw_item="$(bw get item "${args[item-id]}" 2>/dev/null)"
    local err=$?
    if [ $err -ne 0 ] || [ -z "$bw_item" ]; then
      >&2 echo "\e[31mItem '${args[item-id]}' was not found in Bitwarden vault.\e[m"
      echo 'quit=true'
      return 1
    fi
  fi

  # Not sure if I want to keep this output.
  local bw_item_name="$(echo "$bw_item" | jq -r '.name')"
  #local bw_item_id="$(echo "$bw_item" | jq -r '.id')"
  #>&2 echo "\e[32mSelected Bitwarden vault item '$bw_item_name' ($bw_item_id).\e[m"
  >&2 echo "\e[32mSelected Bitwarden vault item '$bw_item_name'.\e[m"

  # Set or validate the username.
  local git_user="$(echo "$bw_item" | jq -r '.login.username')"
  if [ -z "$username" ]; then
    echo "username=$git_user"
  elif [ "$username" != "$git_user" ]; then
    >&2 echo "\e[31mPre-defined username '$username' differs from credential username '$git_user'.\e[m"
    echo 'quit=true'
    return 1
  fi

  # Set the password.
  local git_pass
  if [ -z "${args[custom-field]}" ]; then
    git_pass="$(echo "$bw_item" | jq -r '.login.password')"
    if [ -z "$git_pass" ]; then
      >&2 echo '\e[31mPassword must not be empty.\e[m'
      echo 'quit=true'
      return 1
    fi
  else
    git_pass="$(echo "$bw_item" | jq -r ".fields[] | select(.name == \"${args[custom-field]}\") | .value")"
    if [ -z "$git_pass" ]; then
      >&2 echo "\e[31mCustom field '${args[custom-field]}' does not exist or is empty.\e[m"
      echo 'quit=true'
      return 1
    fi
  fi

  #>&2 echo '\e[33mDEBUG\e[m'
  #echo 'quit=true'
  #return 1
  echo "password=$git_pass"
}

show_help() {
  >&2 echo 'Usage: git-credential-bitwarden get <options>'
  >&2 echo ''
  >&2 echo 'Known options:'
  >&2 echo '  --force         Fail if no matching item was found in the vault. By default Git'
  >&2 echo '                  queries the user interactively if no helper returns usable data.'
  >&2 echo '  --item-id       Use this exact vault item instead of searching for a match.'
  >&2 echo '                  Implies --force.'
  >&2 echo "  --custom-field  Instead of the item's password, use the value from the given"
  >&2 echo '                  custom field.'
}

main() {
  local cmd
  declare -A args

  while [ ! -z "$1" ]; do
    case "$1" in
      --force|-f)
        args[force]=true
        ;;
      --item-id)
        args[item-id]="$2"
        shift
        ;;
      --custom-field)
        args[custom-field]="$2"
        shift
        ;;
      --help|-h)
        show_help
        return 1
        ;;
      -*)
        >&2 echo "\e31[mError: Unknown argument found: $1\e[m"
        return 1
        ;;
      *)
        if [ ! -z "$cmd" ]; then
          >&2 echo "\e31[mError: More than one command specified: $1\e[m"
          return 1
        fi
        cmd="$1"
        ;;
    esac
    shift
  done

  case "$cmd" in
    get)
      credential_get "$args"
      ;;
  esac
}

main "$@"
